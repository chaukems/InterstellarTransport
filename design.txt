Design Considerations
------------------------
I have followed below OOP and SOLID design principles:
1. DRY (Don't repeat yourself)
2. Encapsulate What Changes
3. Open Closed Design Principle - Classes, methods, or functions should be Open for extension (new functionality) and Closed for modification
4. Single Responsibility Principle (SRP)
5. Interface Segregation Principle (ISP)
6. Delegation principles
7. Design patterns

And I have considered the following
1.	Reusability
2.	Robustness
3.	Performance
4.	Readability
5.	Separation of concerns

I have design the app using the Microservice architecture, secured it with jwt and spring security

Rest/WSDL Documentation
---------------------------
I have opted to include swagger documentation to document the service usage.

Some of the design considerations
------------------------------------
Eureka Discovery: for service registration
Feign: a declarative web service client
Zuul: provides intelligent routing
Rest Repositories: to expose JPA repositories as REST endpoints
Web: Spring MVC and embedded Tomcat
Hystrix: a circuit breaker to stop cascading failure and enable resilience
Lombok: to reduce boilerplate code

Web technologies
-------------------
Angular Js
Bootstrap css
Spring mvc


Assumptions
-------------------------
If I had more time I would have included / completed the following
- Api gateway
- Would have used npm, nodejs, angular 9 for web app